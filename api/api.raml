#%RAML 1.0
title: edukolab-api
version: 1.0.0
securitySchemes:
  Bearer:
      description: |
        This scheme validates request by using a token
      type: x-custom
      displayName: Bearer
      describedBy:
        headers:
          Authorization:
            description: |
              The header should contain a valid token
            type: string
baseUri: http://localhost:8008
mediaType: application/json
types:
    Address:
        description: A user's address
        type: string
        example: "123 Fulton Avenue"
    Age:
        type: integer
        minimum: 18
        format: int8
        multipleOf: 1
        example: 19
    CareerInterest:
        type: object
        properties:
            schoolNames?: SchoolName[]
            subjects?: SubjectTaught[]
    CurrentEmployments: Employment[]
    Disability:
        description: A user's disability
        type: string
        example: "blidnesss"
    Email:
        description: A user's email address
        type: string
        pattern: ^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$
        example: "john.doe@example.com"
    Employment:
        type: object
        properties:
            employerContact: Email | Phone
            isVerified:

                type: boolean
                example: false
            school:

                type: School
            subjectsTaught:

                type: SubjectTaught[]
    Error:
        type: Response
        description: A request's response error
        properties:
            data: nil
    Exists:
        type: Error
    FamilyName:
        type: string
        example: "Doe"
    File:
        type: file
        fileTypes: ['image/jpg', 'image/jpeg', 'image/png', 'application/pdf']
        maxLength: 16777216
    FieldError:
        description: A request error caused by an incorrect or incomplete or required field
        type: Error
        properties:
            message:
                example: "Field error"
    FirstName:
        description: A user's firstName
        type: string
        example: "John"
    FullName:
        type: object
        properties:
          familyName:
            type: FamilyName
          firstName:
            type: FirstName
    Gender:
        type: string
        enum: ["MALE", "FEMALE"]
        example: "MALE"
    Grade:
        type: string
        enum: ["G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9", "G10", "G11", "G12"]
        example: "G1"
    Guardian:
        type: FullName
        properties:
            age:
                type: Age
            email?: Email
            gender?: Gender
            phone: Phone
            role: UEGRole
    HighestCompletedEducationLevel:
        type: object
        properties:
            certificate?: File
            name: HighestCompletedEducationLevelName
    HighestCompletedEducationLevelName:
        type: string
        description: The name of a UT-user(teacher's) highest completed education level
        enum: ["FSLC", "WASSCE","OND","HND","Undergraduate","Masters", "PHD"]
        example: "Undergraduate"
    ID:
        description: Generated by jsonwebtoken
        type: string
        example: 5eddf0c1c75e4e0017390203
    IsInNeedOfCareerChange:
        type: boolean
        example: false
    Job:
        type: TeacherJobFilters
        properties:
            studentNumber:
                type: integer
                minimum: 1
            isMixed:
                type: boolean
                example: false
            applications: JobApplication[]
    JobApplication:
        type: TeacherApplicationDetails
        properties:
          jobID: ID
          responses: JobApplicationResponse[]
    JobApplicationResponse:
        type: object
        properties:
          applicationID: ID
          ueg:
              description: This field is not empty if it is a UEG(Guardian) that is responsing to the application
              type: object
              properties:
                  guardian: Guardian
                  message:
                      description: Application response custom message
                      type: string
                      example: "We need you"
                  ward:
                      description: Information about the Ward(student) the parent is employing the teacher for
                      type: Ward
                      properties:
                        familyName: FamilyName
                        firstName: FirstName
          uesr:
              description: This field is not empty if it is a UESR(School Respresentative) that is responsing to the application
              type: object
              properties:
                  address: Address
                  duties: JobDuty[]
                  role: UEGRole
                  school:
                      description: Information about the school this user is representing
                      type: School
                      properties:
                          schoolPhone: Phone
                          schoolEmail: Email
                          schoolWebsite:
                              description: Link tot the school's website
                              type: string
                              pattern: ^((https?|ftp|smtp):\/\/)?(www.)?[a-z0-9]+\.[a-z]+(\/[a-zA-Z0-9#]+\/?)*$
                              example: "nebs.com"
                          isStudentsMixed:
                              description: Informs if students at the school are mixed
                              type: boolean
                              example: true
                          isTeachersMixed:
                              description: Informs if teachers at the school are mixed
                              type: boolean
                              example: true
                          isVerified:
                              description: Informs if school is verified
                              type: boolean
                              example: true
                  state: State
    Offer:
        type: object
        properties:
          responses: OfferResponse[]
          teacherID: ID
          ueg:
              type: object
              properties:
                  guardian:

                      type: object
                      properties:
                          role: UEGRole
                  message:

                      type: string
                      example: "We need you"
                  ward:

                      type: Ward
          uesr:
              type: object
              properties:
                  duties:

                      type: JobDuty[]
                  role:

                      type: UEGRole
                  school:

                      type: School
                      properties:
                          isStudentsMixed:
                              type: boolean
                              example: true
                          isTeachersMixed:
                              type: boolean
                              example: true
                          isVerified:
                              type: boolean
                              example: true
    OfferResponse:
        type: TeacherApplicationDetails
        properties:
            email: Email
            familyName: FamilyName
            firstName: FirstName
            offerID: ID
            phone: Phone
    NotFound:
        description: "A request's response error for when something isn't found"
        type: Error
    Password:
        type: string
        pattern: ^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)$
        minLength: 6
        example: "Fiber1"
    Phone:
        type: string
        pattern: ^[234]\d{12}$
        example: "2348056437809"
    Response:
        description: A request's response
        type: object
        properties:
            data:
                description: A request's response data
                type: nil | object | array
            error:
                description: A request's response error status
                type: boolean
            message:
                description: A request's response message
                type: string
    UEGRole:
        type: string
        description: "A UEG user's(Guardian's) role to a student"
        example: "Parent"
    School:
        description: A school
        type: object
        properties:
            schoolAddress: Address
            schoolName: SchoolName
            schoolState: State
    JobDuty:
        type: object
        properties:
            gradeList:

                type: Grade[]
            isStudentsMixed:

                type: boolean
                example: false
            subjectName:

                type: Subject
            subjectStudentDisabilities:

                type: Disability[]
            subjectStudentNumber:

                type: integer
                example: 50
            subjectTeacher:

                type: string
                example: "Ms. Jane Doe"
    SchoolName:
        description: A school's name
        type: string
        example: "New Estate Baptist School"
    State:
        type: string
        enum: ["Abia","Adamawa","Akwa Ibom","Anambra","Bauchi","Bayelsa","Benue","Borno","Cross River","Delta","Ebonyi","Edo","Ekiti","Enugu","FCT - Abuja","Gombe","Imo","Jigawa","Kaduna","Kano","Katsina","Kebbi","Kogi","Kwara","Lagos","Nasarawa","Niger","Ogun","Ondo","Osun","Oyo","Plateau","Rivers","Sokoto","Taraba","Yobe","Zamfara"]
        example: "Lagos"
    Subject:
        type: string
        description: A subject either in primary or secondary curriculum
        example: "Physics"
    SubjectTaught:
        type: object
        properties:
            gradeLevels:

                type: Grade[]
                example: ["G1", "G2", "G3"]
            subjectName:

                type: Subject
    Success: Response
    TeacherApplicationDetails:
        type: object
        properties:
            teacherAge:

                type: Age
            teacherDisabilitiesExperiencedWith:

                type: Disability[]
            teacherGender:

                type: Gender
            teacherHighestCompletedEducationLevelName:

                type: HighestCompletedEducationLevelName
            teacherIsEmployed:

                type: boolean
                example: true
            teacherResume:

                type: File
            teacherSubjectTaught:

                type: SubjectTaught
    TeacherJobFilters:
        description: Filters applied in fetching jobs for teachers
        type: object
        properties:
            teacherAge?: Age
            teacherCareerInterest: CareerInterest
            teacherGender?: Gender
            teacherHighestCompletedEducationLevelName: HighestCompletedEducationLevelName
            teacherIsEmployed:
                description: Informs if teacher is currently employed
                type: boolean
                example: false
            teacherIsInNeedOfCareerChange: IsInNeedOfCareerChange
            teacherSubjectTaught?: SubjectTaught
    User:
        type: FullName
        properties:
            email:

                type: Email
            phone:

                type: Phone
            userType:

                type: UserType
    UserType:
        type: string
        enum: ["UT","UEG","UEGW","UESR","UPCB","UPTB","UPCTB"]
        example: "UT"
    Ward:
        type: object
        properties:
            age:

                type: Age
            disabilities:

                type: Disability[]
            gender:

                type: Gender
            gradeLevel:

                type: Grade
            subjectList:

                type: Subject[]
/application:
    description: Job applications
    post:
        description: Create a job application
        securedBy:
        - Bearer
        body:
            application/json:
                type: JobApplication
        responses:
            201:
                description: |
                    Application created successfully
                body:
                    application/json:
                        type: Success
                        properties:
                            data: JobApplication
                            message:
                                example: "Application created successfully"
            400:
                description: |
                    Missen or incorrect field
                body:
                    application/json:
                        type: FieldError
            409:
                description: |
                        Application already exists
                body:
                    application/json:
                        type: Exists
                        properties:
                            message:
                                example: "Application already exists"
            404:
                description: |
                    Job not found
                body:
                    application/json:
                        type: NotFound
                        properties:
                            message:
                                example: "Job not found"
    put:
        description: Update a job application
        securedBy:
        - Bearer
        body:
            application/json:
                type: JobApplication
                properties:
                    isConfirmedByEmployer:

                        type: boolean
                        example: false
                    isConfirmedByTeacher:

                        type: boolean
                        example: false
        responses:
            200:
                description: |
                    Application updated successfully
                body:
                    application/json:
                        type: Success
                        properties:
                            data: JobApplication
                            message:
                                example: "Application updated successfully"
            400:
                description: |
                    Missen or incorrect field
                body:
                    application/json:
                        type: FieldError
            404:
                description: |
                    Application not found
                body:
                    application/json:
                        type: NotFound
                        properties:
                            message:
                                example: "Application not found"
            424:
                description: |
                    Job not found
                body:
                    application/json:
                        type: NotFound
                        properties:
                            message:
                                example: "Job not found"
/auth:
    description: Authentication
    post:
        description: Authenticate a user
        body:
            application/json:
                type: object
                properties:
                    email:

                        type: Email
                    password:

                        type: Password
        responses:
            200:
                description: |
                    User authenticated successfully
                body:
                    application/json:
                        type: Success
                        properties:
                            data: ID
                            message:
                                example: "User authenticated successfully"
            400:
                description: |
                    Missen or incorrect field
                body:
                    application/json:
                        type: FieldError
            404:
                description: |
                    User not found
                body:
                    application/json:
                        type: NotFound
                        properties:
                            message:
                                example: "User not found"
/job:
    description: All jobs
    get:
        description: Get all jobs
        securedBy:
        - Bearer
        queryParameters:
            teacherJobFilters: TeacherJobFilters
        responses:
            200:
                description: |
                    Jobs fetched successfully
                body:
                    application/json:
                        type: Success
                        properties:
                            data: Job[]
                            message:
                                example: "Jobs fetched successfully"
            400:
                description: |
                    Missen or incorrect field
                body:
                    application/json:
                        type: FieldError
            404:
                description: |
                    Job not found
                body:
                    application/json:
                        type: NotFound
                        properties:
                            message:
                                example: "Job not found"
    /{jobID}:
        description: A specific job
        uriParameters:
            jobID: ID
/offer:
    description: All offers
    get:
        description: Get all offers
        securedBy:
        - Bearer
        queryParameters:
            teacherID: ID
        responses:
            200:
                description: |
                    Offers fetched successfully
                body:
                    application/json:
                        type: Success
                        properties:
                            data: Offer[]
                            message:
                                example: "Offers fetched successfully"
            400:
                description: |
                    Missen or incorrect field
                body:
                    application/json:
                        type: FieldError
            404:
                description: |
                    No offer found
                body:
                    application/json:
                        type: NotFound
                        properties:
                            message:
                                example: "No offer found"
    /{offerID}:
        description: A specific offer
        uriParameters:
            offerID: ID
        get:
            description: Get a specific offer
            securedBy:
            - Bearer
            responses:
                200:
                    description: |
                        Offer fetched successfully
                    body:
                        application/json:
                            type: Success
                            properties:
                                data: Offer
                                message:
                                    example: "Offer fetched successfully"
                400:
                    description: |
                        Missen or incorrect field
                    body:
                        application/json:
                            type: FieldError
                404:
                    description: |
                        Offer not found
                    body:
                        application/json:
                            type: NotFound
                            properties:
                                message:
                                    example: "Offer not found"
        put:
            description: Update a specific offer
            securedBy:
            - Bearer
            body:
                application/json:
                    type: Offer
                    properties:
                        isConfirmedByEmployer:

                            type: boolean
                            example: false
                        isConfirmedByTeacher:

                            type: boolean
                            example: false
            responses:
                200:
                    description: |
                        Offer updated successfully
                    body:
                        application/json:
                            type: Success
                            properties:
                                data: Offer
                                message:
                                    example: "Offer updated successfully"
                400:
                    description: |
                        Missen or incorrect field
                    body:
                        application/json:
                            type: FieldError
                404:
                    description: |
                        Offer not found
                    body:
                        application/json:
                            type: NotFound
                            properties:
                                message:
                                    example: "Offer not found"
/response:
    description: All responses
    get:
        description: Get all responses for a particular job application or job offer
        securedBy:
        - Bearer
        queryParameters:
            applicationID?: ID
            offerID?: ID
        responses:
            200:
                description: |
                    Responses fetched successfully
                body:
                    application/json:
                        type: Success
                        properties:
                            data: JobApplicationResponse[] | OfferResponse[]
                            message:
                                example: "Responses fetched successfully"
            400:
                description: |
                    Missen or incorrect field
                body:
                    application/json:
                        type: FieldError
            404:
                description: |
                    Responses not found
                body:
                    application/json:
                        type: NotFound
                        properties:
                            message:
                                example: "Responses not found"
            424:
                description: |
                    Application not found
                body:
                    application/json:
                        type: NotFound
                        properties:
                            message:
                                example: "Application not found"
            444:
                description: |
                    Job not found
                body:
                    application/json:
                        type: NotFound
                        properties:
                            message:
                                example: "Job not found"
            464:
                description: |
                    Offer not found
                body:
                    application/json:
                        type: NotFound
                        properties:
                            message:
                                example: "Offer not found"
    post:
        description: Create a response
        securedBy:
        - Bearer
        body:
            application/json:
                type: JobApplicationResponse | OfferResponse
        responses:
            201:
                description: |
                    Response created successfully
                body:
                    application/json:
                        type: Success
                        properties:
                            data: JobApplicationResponse | OfferResponse
                            message:
                                example: "Response created successfully"
            400:
                description: |
                    Missen or incorrect field
                body:
                    application/json:
                        type: FieldError
            409:
                description: |
                        Response already exists
                body:
                    application/json:
                        type: Exists
                        properties:
                            message:
                                example: "Response already exists"
            404:
                description: |
                    Job not found
                body:
                    application/json:
                        type: NotFound
                        properties:
                            message:
                                example: "Job not found"
            424:
                description: |
                    Offer not found
                body:
                    application/json:
                        type: NotFound
                        properties:
                            message:
                                example: "Offer not found"

/user:
    description: All users
    post:
        description: Create a user
        body:
            application/json:
                type: User
                properties:
                    confirmPassword:
                        type: Password
                    password:
                        type: Password
        responses:
            201:
                description: |
                    User created successfully
                body:
                    application/json:
                        type: Success
                        properties:
                            data: nil
                            message:
                                example: "User created successfully"
            400:
                description: |
                    Missen or incorrect field
                body:
                    application/json:
                        type: FieldError
            409:
                description: |
                        User already exists
                body:
                    application/json:
                        type: Exists
                        properties:
                            message:
                                example: "User already exists"
    /{userID}:
        description: A specific user
        uriParameters:
            userID: ID
        put:
            description: Update a user
            securedBy:
            - Bearer
            body:
                application/json:
                    type: User
                    properties:
                        address?: Address
                        age?: Age
                        careerInterests?: CareerInterest[]
                        currentEmployments?: CurrentEmployments
                        disabilitiesExperiencedWith?: Disability[]
                        gender?: Gender
                        highestCompletedEducationLevel?: HighestCompletedEducationLevel
                        isEmployed?: boolean
                        isInNeedOfCareerChange?: IsInNeedOfCareerChange
                        resume?: File
                        state?: State
            responses:
                200:
                    description: |
                        User updated successfully
                    body:
                        application/json:
                            type: Success
                            properties:
                                data: User
                                message:
                                    example: "User updated successfully"
                400:
                    description: |
                        Missen or incorrect field
                    body:
                        application/json:
                            type: FieldError
                404:
                    description: |
                        User not found
                    body:
                        application/json:
                            type: NotFound
                            properties:
                                message:
                                    example: "User not found"

#TODO: Routes
# 1. Confirm teacher
# 1. Confirm school owners
# 2. Confim HighestCompletedEducationLevel
# 3. Consider adding years of experience to teacher model
# 4. Add enum for UEGRole-type
